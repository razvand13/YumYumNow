openapi: 3.0.3
info:
  title: YumYumNow Orders API
  version: 1.0.0
  description: API for handling orders in the YumYumNow application.
servers:
  - url: 'https://localhost:8082'
tags:
  - name: Customer
    description: Operations available to customer users.
  - name: Admin
    description: Administrative operations.
  - name: Vendor
    description: Operations available to vendors.

paths:
  /order/{orderId}/status:
    put:
      tags:
        - Order
      summary: Update the status of an order
      description: Allows a vendor, courier or an admin to update the status of a specific order.
      operationId: updateOrderStatus
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/Status'
            examples:
              statusUpdateExample:
                summary: Example of updating an order status
                value:
                  status: "preparing"   
      responses:
        '200':
          description: Order status updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - Invalid status or request format.
        '404':
          description: Not Found - Order ID does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred.  
          
  /customer/{customerId}/order:
    post:
      tags:
        - Customer
      summary: Create a new order
      description:  Creates a new order for the customer with a specified vendor. This is done by selecting a vendor from the list of all vendors basically, so we are sure that the customer is in the range of the vendor.
      operationId: createOrder
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vendorId:
                  type: string
                  format: uuid
                  description: The ID of the restaurant the customer is ordering from.
                address:
                  $ref: '#/components/schemas/Address'
                 
            examples:
              createOrderExample:
                summary: Example of creating a new order
                value:
                  vendorId: 42
                  address:
                    houseNumber: 123
                    zip: "2133DC"
                    longitude: 40.7128
                    latitude: -74.0060      
      responses:
        '200':
          description: Newly created order object with orderId, customerId, vendorId and address populated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                orderResponseExample:
                  summary: Example response for a newly created order
                  value:
                    ID: "987e4567-e89b-12d3-a456-426614174002"
                    dishes: []
                    location:
                      houseNumber: 123
                      zip: "2133DC"
                      longitude: 40.7128
                      latitude: -74.0060
                    specialRequirements: []
                    status: "pending"
                    totalPrice: 0.00
                    vendorId: 42
                    customerId: "123e4567-e89b-12d3-a456-426614174000"
                    orderTime: "2023-12-07T15:30:00Z"
        '400':
          description: Bad Request - No location present (and no default address for customer) or other input errors (invalid format).
        '401':
          description: Unauthorized - Not a customer user.
        '404':
          description: Not Found - User does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.

  /customer/{customerId}/vendors:
    get:
      tags:
        - Customer
      summary: Get list of vendors
      description:  >
        Get a list of vendors within a specified radius around the customer's current location or default address. 
        The radius is predefined - 5 kilometers). The current location is retrieved from the users microservice. If there is no current location, we check if the user has a home address and use that. If there is no home address either, we send an error response. Additionaly, searching and filtering restaurants through query parameters is possible.
      operationId: getVendors
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"    
        - in: query
          name: name
          required: false
          schema:
            type: string      
          examples:
            nameFilterExample:
              value: "McDonalds"  
        - in: query
          name: minAvgPrice
          required: false
          schema:
            type: integer
          examples:
            minPriceExample:
              value: 0  
        - in: query
          name: maxAvgPrice
          required: false
          schema:
            type: integer   
          examples:
            maxPriceExample:
              value: 999    
      responses:
        '200':
          description: List of vendors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'
              examples:
                vendorListExample:
                  summary: Example response of a list of vendors
                  value:
                    - ID: "987e4567-e89b-12d3-a456-423144174001"
                      name: "NY pizza"
                      location:
                        houseNumber: 456
                        zip: "12346"
                        Longitude: 40.7130
                        Latitude: -74.0070
                      
        '400':
          description: Bad Request - Invalid request parameters.
        '401':
          description: Unauthorized - Not a customer user.
        '404':
          description: Not Found - User does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
          
  /customer/{customerId}/order/{orderId}:
    get:
      tags: 
        - Customer
      summary: Get all details of the order for a customer (updated price as well)
      description: >
        Get all the details of a specific order for a customer based on the order id
      operationId: getOrder
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"   
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value:  "987e4567-e89b-12d3-a456-423144174001"
      responses:
        '200':
          description: Details of the specified order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:  
                orderDetailsExample:
                  summary: Example response for a specific order
                  value:
                    ID: "987e4567-e89b-12d3-a456-423144174001"
                    dishes: 
                      - ID: "ccf1f2d7-8f7f-4044-9a30-16790a432977"
                        dish:
                          ID: "eef1f2d7-8f7f-4044-9a30-16790a432977"
                          name: "Pizza Margherita"
                          imageLink: "http://example.com/images/pizza.jpg"
                          price: 12.50
                          allergens: ["Gluten", "Dairy"]
                          ingredients: ["Flour", "Tomatoes", "Mozzarella", "Basil", "Olive Oil"]
                          description: "Best pizza in Europe"
                        quantity: 1
                      - ID: "3154bd7c-a7a9-4005-9dec-7980fb249976"
                        dish:
                          ID: "3334bd7c-a7a9-4005-9dec-7980fb249976"
                          name: "Caesar Salad"
                          imageLink: "http://example.com/images/salad.jpg"
                          price: 10.00
                          allergens: ["Eggs", "Fish"]
                          ingredients: ["Lettuce", "Croutons", "Parmesan Cheese", "Chicken", "Caesar Dressing"]
                          description: "Traditional Caesar Salad"
                        quantity: 1
                    location:
                      houseNumber: 456
                      zip: "12346"
                      longitude: 40.7130
                      latitude: -74.0070
                    specialRequirements: "Extra cheese on pizza"
                    status: "preparing"
                    totalPrice: 22.50
                    vendorId: 42
                    customerId: "123e4567-e89b-12d3-a456-426614174000" 
                    orderTime: "2023-12-07T15:30:00Z"
        '400':
          description: Bad Request - Invalid request parameters.
        '401':
          description: Unauthorized - User is not a customer/order does not belong to user.
        '404':
          description: Order or customer not found.
        '500':
          description: Internal Server Error - An unexpected error occurred.        
          
  /customer/{customerId}/order/{orderId}/vendor:
    get:
      tags:
        - Customer
      summary: Get all dishes of the selected vendor for the order.
      description: >
        Get a list of all of the dishes of the vendor associated with the order (the selected vendor) as a customer. Only show dishes that don't include the customer's allergies.
      operationId: getVendorDishes
      parameters: 
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples: 
            customerIdExample:
              value:  "123e4567-e89b-12d3-a456-426614174000"    
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value:  "987e4567-e89b-12d3-a456-423144174001"
      responses:
        '200':
          description: A list of dishes offered by the vendor.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
              examples:
                example1:
                  summary: Example list of dishes
                  value:
                    - ID: "ccf1f2d7-8f7f-4044-9a30-16790a432977"
                      name: "Margherita Pizza"
                      imageLink: "http://example.com/images/margherita.jpg"
                      price: 12.50
                      allergens: ["Gluten", "Dairy"]
                      ingredients: ["Flour", "Tomatoes", "Mozzarella", "Basil", "Olive Oil"]
                      description: "Best pizza in Delft!"
                    - ID: "0763eb65-564d-4655-bb16-1f0ab46d0c83"
                      name: "Extra Vegan Vegan Salad"
                      imageLink: "http://example.com/images/vegan-salad.jpg"
                      price: 99.99
                      allergens: ["Meat"]
                      ingredients: ["Lettuce", "Extra Lettuce"]
                      description: "A vegan salad"
        '400':
          description: Bad Request - Invalid request parameters.              
        '401':
          description: Unauthorized - User is not a customer/order does not belong to user.
        '404':
          description: User or order not found        
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
  
  /customer/{customerId}/order/{orderId}/dish/{dishId}:
    get:
      tags:
        - Customer
      summary: Get details of a dish inside an order
      description: Gets the details of a dish based on its id
      operationId: getDishFromOrder
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"      
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value: "987e4567-e89b-12d3-a456-426614174002"  
        - in: path
          name: dishId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            dishIdExample:
              value: "ccf1f2d7-8f7f-4044-9a30-16790a432977"  
      responses:      
        '200':
          description: Details of the specified dish in the order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderedDish'
              examples:
                example1:
                  summary: Example dish
                  value:
                    ID: "eef1f2d7-8f7f-4044-9a30-16790a432979"
                    dish:
                      ID: "ccf1f2d7-8f7f-4044-9a30-16790a432977"
                      name: "Margherita Pizza"
                      imageLink: "http://example.com/images/margherita.jpg"
                      price: 12.50
                      allergens: ["Gluten", "Dairy"]
                      ingredients: ["Flour", "Tomatoes", "Mozzarella", "Basil", "Olive Oil"]
                      description: "Best pizza in Delft!"
                    quantity: 2
        '400':
          description: Bad Request - Invalid request parameters.
        '401':
          description: Unauthorized - Order does not belong to the user/dish does not belong to order/user is not a customer.
        '404':
          description: Not Found - Dish, order, or customer not found.
        '500':
          description: Internal Server Error - An unexpected error occurred.      
          
    post:
      tags:
        - Customer
      summary: Add dish to order
      description: Adds the specified dish to the order.
      operationId: addDishToOrder
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"      
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value: "987e4567-e89b-12d3-a456-426614174002"   
        - in: path
          name: dishId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            dishIdExample:
              value: "ccf1f2d7-8f7f-4044-9a30-16790a432977"    
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Dish added successfully, updated order returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:  
                orderDetailsExample:
                  summary: Example response for a specific order
                  value:
                    ID: "987e4567-e89b-12d3-a456-423144174001"
                    dishes: 
                      - ID: "ccf1f2d7-8f7f-4044-9a30-16790a432977"
                        name: "Pizza Margherita"
                        imageLink: "http://example.com/images/pizza.jpg"
                        price: 12.50
                        allergens: ["Gluten", "Dairy"]
                        ingredients: ["Flour", "Tomatoes", "Mozzarella", "Basil", "Olive Oil"]
                        description: "Best pizza in Europe"
                      - ID: "3154bd7c-a7a9-4005-9dec-7980fb249976"
                        name: "Caesar Salad"
                        imageLink: "http://example.com/images/salad.jpg"
                        price: 10.00
                        allergens: ["Eggs", "Fish"]
                        ingredients: ["Lettuce", "Croutons", "Parmesan Cheese", "Chicken", "Caesar Dressing"]
                        description: "Traditional Caesar Salad"
                    location:
                      houseNumber: 456
                      zip: "1234BK"
                      longitude: 40.7130
                      latitude: -74.0070
                    specialRequirements: "Extra cheese on pizza"
                    status: "preparing"
                    totalPrice: 22.50
                    vendorId: 42
                    customerId: "123e4567-e89b-12d3-a456-426614174000"    
                    orderTime: "2023-12-07T15:30:00Z"
        '400':
          description: Bad Request - Dish not added to order.
        '401':
          description: Unauthorized - Order does not belong to user/dish does not belong to current vendor/user is not a customer.
        '404':
          description: Not Found - Dish, order or customer not found.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.

    put:
      tags:
        - Customer
      summary: Update dish quantity from order
      description: Update the specified quantity of a dish from the order.
      operationId: updateDishQty
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:  
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"        
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value: "987e4567-e89b-12d3-a456-426614174002"     
        - in: path
          name: dishId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            dishIdExample:
              value: "ccf1f2d7-8f7f-4044-9a30-16790a432977"  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Quantity of dish reduced in order, updated order returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request - Order not updated.
        '401':
          description: Unauthorized - Order does not belong to user/user is not a customer.
        '404':
          description: Not Found - Customer/Order not found or dish not in order.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
    
    delete:
      tags:
        - Customer
      summary: Remove a dish from the order
      description: Removes a specified dish from the customer's order.
      operationId: removeDishFromOrder
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:  
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"        
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value: "987e4567-e89b-12d3-a456-426614174002"     
        - in: path
          name: dishId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            dishIdExample:
              value: "ccf1f2d7-8f7f-4044-9a30-16790a432977"  
      responses:
        '200':
          description: Dish removed successfully from the order, updated order returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request - Dish not deleted.
        '401':
          description: Unauthorized - Order does not belong to the user/user is not a customer.
        '404':
          description: Not Found - Order/Customer not found, dish not found in order.
        '500':
          description: Internal Server Error - An unexpected error occurred.
          
  /customer/{customerId}/order/{orderId}/requirements:
    put:
      tags:
        - Customer
      summary: Update order special requirements
      description: Update the order with the mentioned special requirements
      operationId: updateSpecialRequirements
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:  
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"        
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value: "987e4567-e89b-12d3-a456-426614174002"     
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                specialRequirements:
                  type: string
            examples:
              requirementsUpdateExample:
                summary: Example of special requirements
                value:
                  specialRequirements: "Please add a lot of onions. A lot."      
      responses:
        '200':
          description: Special requirements added, updated order returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request - Order not updated.
        '401':
          description: Unauthorized - Order does not belong to user/user is not a customer.
        '404':
          description: Not Found - Order not found.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
      
  /customer/{customerId}/order/{orderId}/pay:
    post:
      tags:
        - Customer
      summary: Pay for an order
      description: Processes payment for the specified order. 
      operationId: payOrder
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:  
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"        
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value: "987e4567-e89b-12d3-a456-426614174002"   
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentInformation:
                  type: string
                paymentOption:
                  $ref: '#/components/schemas/Payment'
            examples:
              paymentDetailsExample:
                summary: Example of providing payment details
                value:
                  paymentInformation: "Credit Card ending in 1234"
                  paymentOption: creditCard      
      responses:
        '200':
          description: Payment processed successfully, order status set to accepted.
        '400':
          description: Bad Request - Payment information missing or payment unsuccessful.
        '401':
          description: Unauthorized - Order does not belong to user/user is not a customer.
        '404':
          description: Not Found - Order or user does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred.

  /customer/{customerId}/history:
    get:
      tags:
        - Customer
      summary: Get list of previous orders
      description: Returns a list of previous orders for the specified user.
      operationId: getPersonalOrderHistory
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:  
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"        
      responses:
        '200':
          description: List of previous orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request - Invalid request parameters.
        '401':
          description: Unauthorized - Not a customer user.
        '404':
          description: Not Found - User does not exist.
        '500':
          description: Internal Server Error - An unexpected error occured on the server.

  /customer/{customerId}/reorder/{orderId}:
    post:
      tags:
        - Customer
      summary: Reorder based on a previous order
      description: Creates a new order with identical contents as a previous order.
      operationId: reorder
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
            format: uuid
          examples:  
            customerIdExample:
              value: "123e4567-e89b-12d3-a456-426614174000"        
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          examples:
            orderIdExample:
              value: "987e4567-e89b-12d3-a456-426614174002"   
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Successfully created duplicate order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request - Invalid request parameters.
        '401':
          description: Unauthorized - order does not belong to customer/user is not a customer.
        '403':
          description: Forbidden - Reordering this order is not allowed (discontinued items).
        '404':
          description: Not Found - Order/customer does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
  /admin/{adminId}/orders:
    get:
      tags:
        - Admin
      summary: View all orders
      description: Allows an admin to view all orders in the system.
      operationId: adminGetAllOrders
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of all orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden - User is not admin.
        '404':
          description: Not Found - User does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
        
  /admin/{adminId}/order/{orderId}:
    get:
      tags:
        - Admin
      summary: Get a specific order (for rating)
      description: Allows an admin to get a specific order.
      operationId: adminGetOrder
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden - User is not admin.
        '404':
          description: Not Found - Order ID does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.  
          
    put:
      tags:
        - Admin
      summary: Modify a specific order
      description: Allows an admin to modify any attribute of a specific order.
      operationId: adminUpdateOrder
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully, updated order returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden - User is not admin.
        '404':
          description: Not Found - Order ID does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.  

    delete:
      tags:
        - Admin
      summary: Remove an order
      description: Allows an admin to remove any order from the system.
      operationId: adminRemoveOrder
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order deleted successfully.
        '403':
          description: Forbidden - User is not admin.
        '404':
          description: Not Found - Order ID does not exist.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.  
          
  /vendor/{vendorId}/dish:
    post:
      tags:
        - Vendor
      summary: Add a new dish to the vendor menu
      operationId: addDishToMenu
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
            examples:
              example1:
                summary: Example dish
                value:
                  name: "Margherita Pizza"
                  imageLink: "http://example.com/images/margherita.jpg"
                  price: 12.50
                  allergens: ["Gluten", "Dairy"]
                  ingredients: ["Flour", "Tomatoes", "Mozzarella", "Basil", "Olive Oil"]
                  description: "Best pizza in Delft!"
      responses:
        '200':
          description: New dish has been added to the vendor menu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
              examples:
                exampleResponse:
                  summary: Example response of a newly added dish
                  value:
                    ID: "ccf1f2d7-8f7f-4044-9a30-16790a432977"
                    name: "Margherita Pizza"
                    imageLink: "http://example.com/images/margherita.jpg"
                    price: 12.50
                    allergens: ["Gluten", "Dairy"]
                    ingredients: ["Flour", "Tomatoes", "Mozzarella", "Basil", "Olive Oil"]
                    description: "Best pizza in Delft!"
        '400':
          description: Bad Request - Incorrect dish details format or missing required fields.
        '401':
          description: Unauthorized - User is not a vendor
        '404':
          description: Vendor not found
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
  /vendor/{vendorId}/orders:
    get:
      tags:
        - Vendor
      summary: Get orders for a vendor
      description: A vendor can ask for all of their orders. They only receive orders that have been paid for, so the ones with status "accepted".
      operationId: getVendorOrders
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        
      responses:
        '200':
          description: List of orders for the vendor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description:  Bad Request - Invalid request parameters. 
        '401':
          description: Unauthorized - User is not a vendor          
        '404':
          description: Vendor not found
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
          
  /vendor/{vendorId}/dishes:
    get:
      tags:
        - Vendor
      summary: Get list of dishes from a vendor
      description: Allows a vendor to see their own menu.
      operationId: getOwnDishes
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A list of dishes offered by the vendor.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
              examples:
                example1:
                  summary: Example list of dishes
                  value:
                    - ID: "ccf1f2d7-8f7f-4044-9a30-16790a432977"
                      name: "Margherita Pizza"
                      imageLink: "http://example.com/images/margherita.jpg"
                      price: 12.50
                      allergens: ["Gluten", "Dairy"]
                      ingredients: ["Flour", "Tomatoes", "Mozzarella", "Basil", "Olive Oil"]
                      description: "Best pizza in Delft!"
                    - ID: "0763eb65-564d-4655-bb16-1f0ab46d0c83"
                      name: "Extra Vegan Vegan Salad"
                      imageLink: "http://example.com/images/vegan-salad.jpg"
                      price: 99.99
                      allergens: ["Meat"]
                      ingredients: ["Lettuce", "Extra Lettuce"]
                      description: "A vegan salad"
        '400':
          description:  Bad Request - Invalid request parameters.               
        '401':
          description: Unauthorized - User is not a vendor.
        '404':
          description: Vendor not found        
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.
          
  /vendor/{vendorId}/dish/{dishId}:
    get:
      tags:
        - Vendor
      summary: Get details of a specific dish
      description: Get detailed information about a specific dish offered by the vendor.
      operationId: getDish
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: dishId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detailed information about the specified dish.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
              examples:
                example1:
                  summary: Example dish details
                  value:
                    ID: "ccf1f2d7-8f7f-4044-9a30-16790a432977"
                    name: "Margherita Pizza"
                    imageLink: "http://example.com/images/margherita.jpg"
                    price: 12.50
                    allergens: ["Gluten", "Dairy"]
                    ingredients: ["Flour", "Tomatoes", "Mozzarella", "Basil", "Olive Oil"]
                    description: "Best pizza in Delft!"
        '400':
          description:  Bad Request - Invalid request parameters.               
        '401':
          description: Unauthorized - User is a vendor/dish does not belong to vendor.
        '404':
          description: Dish or vendor not found.
        '500':
          description: Internal Server Error - An unexpected error occurred on the server.

    delete:
      tags:
        - Vendor
      summary: Delete a dish from the menu
      operationId: removeDishFromMenu
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: dishId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Dish removed successfully from the menu.
        '400':
          description: Bad Request - Dish not deleted.
        '401':
          description: Unauthorized - User is not a vendor/dish does not belong to vendor.
        '404':
          description: Not Found - Dish or vendor not found.
        '500':
          description: Internal Server Error - An unexpected error occurred.        
     
    put:
      tags:
        - Vendor
      summary: Update details of a dish
      operationId: updateDishDetails
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: dishId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
            examples:
              example1:
                summary: Example dish update
                value:
                  name: "Updated Margherita Pizza"
                  imageLink: "http://example.com/new-images/margherita.jpg"
                  price: 13.00
                  allergens: ["Gluten", "Dairy"]
                  ingredients: ["Flour", "Tomatoes", "Mozzarella Cheese", "Basil", "Olive Oil"]
                  description: "Now the best in Hague too!"  
      responses:
        '200':
          description: Dish details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
              examples:
                exampleResponse:
                  summary: Example response after updating a dish
                  value:
                    ID: "ccf1f2d7-8f7f-4044-9a30-16790a432977"
                    name: "Updated Margherita Pizza"
                    imageLink: "http://example.com/new-images/margherita.jpg"
                    price: 13.00
                    allergens: ["Gluten", "Dairy"]
                    ingredients: ["Flour", "Tomatoes", "Mozzarella Cheese", "Basil", "Olive Oil"]
                    description: "Now the best in Hague too!"
        '400':
          description: Bad Request - Incorrect dish details format or missing required fields.
        '401':
          description: Unauthorized - User is not a vendor/dish does not belong to vendor.
        '404':
          description: Not Found - Dish or vendor not found.
        '500':
          description: Internal Server Error - An unexpected error occurred.
          
  /vendor/{vendorId}/orders/{orderId}:
    get:
      tags:
        - Vendor
      summary: Get details of a specific order (including how much money is earned and special requirements)
      operationId: getOrderDetails
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the specified order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request - Invalid request parameters.
        '401':
          description: Unauthorized - User is not a vendor/order does not belong to vendor.
        '404':
          description: Order or vendor not found.
        '500':
          description: Internal Server Error - An unexpected error occurred.
        
   
  /vendor/{vendorId}/customers/{customerId}/history:
    get:
      tags:
        - Vendor
      summary: Get order history for a specific customer
      description: Allows a vendor to view the order history of a specific customer.
      operationId: getCustomerOrderHistory
      parameters:
        - name: vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of orders made by the specified customer for the given vendor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request - Invalid request parameters.          
        '401':
          description: Unauthorized - User is not a vendor.
        '404':
          description: Not Found - Vendor not found or customer has not ordered from vendor.
        '500':
          description: Internal Server Error - An unexpected error occurred.  
  
  /vendor/{vendorId}/analytics:
    get:
      tags:
        - Vendor
      summary: Get analytics for a vendor
      operationId: getVendorAnalytics
      description: Calculate and return the analytics for a vendor. See the Analytics schema below for details.
      parameters:
        - name : vendorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Analytics object 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        '400': 
          description: Bad request - Invalid request parameters.      
        '401':
          description: Unauthorized - User is not a vendor.
        '404':
          description: Vendor not found.
        '500':
          description: Internal Server Error - An unexpected error occurred.  
          
components:
  schemas:
    Order:
      type: object
      x-class-extra-annotation: '@javax.persistence.Entity @javax.persistence.Table(name = "customer_order")'
      properties:
        ID:
          type: string
          format: uuid
          x-field-extra-annotation: '@javax.persistence.Id @javax.persistence.GeneratedValue(generator = "UUID") @org.hibernate.annotations.GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")'
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/OrderedDish'
          x-field-extra-annotation: '@javax.persistence.OneToMany(cascade=javax.persistence.CascadeType.ALL)'
        location:
          $ref: '#/components/schemas/Address'
        specialRequirements:
          type: string
        status:
          $ref: '#/components/schemas/Status'
        totalPrice:
          type: number
          format: double
        orderTime:
          type: string
          format: date-time
          description: The timestamp when the order was created.  
        vendorId:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid

    Address:
      x-class-extra-annotation: '@javax.persistence.Embeddable'
      type: object
      properties:
        houseNumber:
          type: integer
        zipCode:
          type: string
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double

    Vendor:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        name:
          type: string
        location:
          $ref: '#/components/schemas/Address'


    Dish:
      type: object
      x-class-extra-annotation: '@javax.persistence.Entity @javax.persistence.Table(name = "dish")'
      properties:
        ID:
          type: string
          format: uuid
          x-field-extra-annotation: '@javax.persistence.Id @javax.persistence.GeneratedValue(generator = "UUID") @org.hibernate.annotations.GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")'
        name:
          type: string
        imageLink:
          type: string
        price:
          type: number
          format: double
        isDeleted:
          type: boolean
          default: false
        allergens:
          type: array
          items:
            type: string
          x-field-extra-annotation: '@javax.persistence.ElementCollection'
        ingredients:
          type: array
          items:
            type: string
          x-field-extra-annotation: '@javax.persistence.ElementCollection'
        description:
          type: string
        vendorId:
          type: string
          format: uuid

    OrderedDish:
      type: object
      x-class-extra-annotation: '@javax.persistence.Entity @javax.persistence.Table(name = "ordered_dish")'
      properties:
        id:
          type: string
          format: uuid
          x-field-extra-annotation: '@javax.persistence.Id @javax.persistence.GeneratedValue(generator = "UUID") @org.hibernate.annotations.GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")'
        dish:
          allOf:
            - $ref: '#/components/schemas/Dish'
          x-field-extra-annotation: '@javax.persistence.ManyToOne'
        quantity:
          type: integer
          default: 0

    Status:
      type: string
      enum:
        - pending
        - accepted
        - rejected
        - preparing
        - givenToCourier
        - onTransit
        - delivered

        
    Payment:
      type: string
      enum:
        - creditCard
        - iDeal
        - GooglePay
        - ApplePay
      default: iDeal
        
    Analytics:
      type: object
      properties:
        orderVolumes:
          type: integer
          description: Total number of orders for the vendor
        popularItems:
          type: array
          items:
            type: object
            properties:
              itemId:
                type: integer
              itemName:
                type: string
              orderCount:
                type: integer
            description: List of popular items based on order frequency
        peakOrderingTimes:
          type: array
          description: Times when the highest number of orders are placed
          items:
            type: string
            format: date-time
          
        customerPreferences:
          type: array
          items:
            type: object
            properties:
              customerId:
                type: string
                format: uuid
                description: The unique identifier of the customer
              mostOrderedDishes:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
                description: Most frequently ordered dishes by the specific customer
            description: Customer-specific preferences based on most frequently ordered dishes