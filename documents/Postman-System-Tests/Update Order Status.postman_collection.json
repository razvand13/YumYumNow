{
	"info": {
		"_postman_id": "fba6f6d1-03c3-4684-8215-13aa9358e859",
		"name": "Update Order Status",
		"description": "We check that we can update the status of an order by first creating a customer and a vendor, then creating the order for both. Finally we make a request to change the order to what we want",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "31458650"
	},
	"item": [
		{
			"name": "test customer Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"if (response && response.customerId) {\r",
							"    pm.globals.set(\"customerId\", response.customerId);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response must have customerId\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('customerId');\r",
							"});\r",
							"\r",
							"pm.test(\"Name is 'Test Customer'\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql(\"Test Customer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Home Address is correct\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.homeAddress.latitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.homeAddress.longitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.homeAddress.zipCode).to.eql(\"2554EZ\");\r",
							"    pm.expect(responseJson.homeAddress.houseNumber).to.eql(24);\r",
							"});\r",
							"\r",
							"pm.test(\"Current Address is correct\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.currentLocation.latitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.currentLocation.longitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.currentLocation.zipCode).to.eql(\"2554EZ\");\r",
							"    pm.expect(responseJson.currentLocation.houseNumber).to.eql(24);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "3",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-User-Id",
						"value": "061427b7-a4d3-47de-86dc-764a227d6d72",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Test Customer\",\r\n  \"email\": \"customer@customer.com\",\r\n  \"homeAddress\": {\r\n    \"latitude\": 34.092,\r\n    \"longitude\": 34.092,\r\n    \"zipCode\": \"2554EZ\",\r\n    \"houseNumber\": 24\r\n  },\r\n  \"allergens\": \"Salt\",\r\n  \"currentLocation\": {\r\n    \"latitude\": 34.092,\r\n    \"longitude\": 34.092,\r\n    \"zipCode\": \"2554EZ\",\r\n    \"houseNumber\": 24\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8088/customers",
				"description": "Create test customer"
			},
			"response": []
		},
		{
			"name": "test vendor in range Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"if (response && response.vendorId) {\r",
							"    pm.globals.set(\"vendorIdInRange\", response.vendorId);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response must have vendorId\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('vendorId');\r",
							"});\r",
							"\r",
							"pm.test(\"Name is 'Test Restaurant in Range'\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql(\"Test Restaurant In Range\");\r",
							"});\r",
							"\r",
							"pm.test(\"Address is correct\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.location.latitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.location.longitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.location.zipCode).to.eql(\"2554EZ\");\r",
							"    pm.expect(responseJson.location.houseNumber).to.eql(24);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Test Restaurant In Range\",\r\n  \"isBlocked\": false,\r\n  \"email\": \"restaurant@restaurant.com\",\r\n  \"isApproved\": false,\r\n  \"location\": {\r\n    \"latitude\": 34.092,\r\n    \"longitude\": 34.092,\r\n    \"zipCode\": \"2554EZ\",\r\n    \"houseNumber\": 24\r\n  },\r\n  \"schedule\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8088/vendors"
			},
			"response": []
		},
		{
			"name": "Create a new order Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"if (response && response.ID) {\r",
							"    pm.globals.set(\"orderId\", response.ID);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate response structure and content\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property('dishes', null);\r",
							"    pm.expect(jsonData).to.have.property('location');\r",
							"    pm.expect(jsonData.location).to.have.property('houseNumber', 4);\r",
							"    pm.expect(jsonData.location).to.have.property('zipCode', \"2614HT\");\r",
							"    pm.expect(jsonData.location).to.have.property('longitude', 21.892);\r",
							"    pm.expect(jsonData.location).to.have.property('latitude', 54.562);\r",
							"    pm.expect(jsonData).to.have.property('specialRequirements', null);\r",
							"    pm.expect(jsonData).to.have.property('status', 'pending');\r",
							"    pm.expect(jsonData).to.have.property('totalPrice', null);\r",
							"    pm.expect(jsonData).to.have.property('orderTime');\r",
							"    pm.expect(jsonData).to.have.property('ID');\r",
							"});\r",
							"\r",
							"pm.test(\"Check if vendorId matches global variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('vendorId');\r",
							"    pm.expect(jsonData.vendorId).to.eql(pm.globals.get(\"vendorIdInRange\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check if customerId matches global variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('customerId');\r",
							"    pm.expect(jsonData.customerId).to.eql(pm.globals.get(\"customerId\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"vendorId\": \"{{vendorIdInRange}}\",\n  \"address\": {\n    \"houseNumber\": 4,\n    \"zipCode\": \"2614HT\",\n    \"longitude\": \"21.892\",\n    \"latitude\": \"54.562\"\n  }\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/customer/{{customerId}}/order",
				"description": "Creates a new order for the customer with a specified vendor. This is done by selecting a vendor from the list of all vendors basically, so we are sure that the customer is in the range of the vendor."
			},
			"response": [
				{
					"name": "Newly created order object with orderId, customerId, vendorId and address populated.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"vendorId\": \"<uuid>\",\n  \"address\": {\n    \"houseNumber\": \"<integer>\",\n    \"zip\": \"<string>\",\n    \"longitude\": \"<double>\",\n    \"latitude\": \"<double>\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"order"
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"ID\": \"<uuid>\",\n  \"dishes\": [\n    {\n      \"id\": \"<uuid>\",\n      \"dish\": {\n        \"ID\": \"<uuid>\",\n        \"name\": \"<string>\",\n        \"imageLink\": \"<string>\",\n        \"price\": \"<double>\",\n        \"isDeleted\": false,\n        \"allergens\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"ingredients\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"description\": \"<string>\",\n        \"vendorId\": \"<uuid>\"\n      },\n      \"quantity\": 0\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"dish\": {\n        \"ID\": \"<uuid>\",\n        \"name\": \"<string>\",\n        \"imageLink\": \"<string>\",\n        \"price\": \"<double>\",\n        \"isDeleted\": false,\n        \"allergens\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"ingredients\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"description\": \"<string>\",\n        \"vendorId\": \"<uuid>\"\n      },\n      \"quantity\": 0\n    }\n  ],\n  \"location\": {\n    \"houseNumber\": \"<integer>\",\n    \"zip\": \"<string>\",\n    \"longitude\": \"<double>\",\n    \"latitude\": \"<double>\"\n  },\n  \"specialRequirements\": \"<string>\",\n  \"status\": \"onTransit\",\n  \"totalPrice\": \"<double>\",\n  \"orderTime\": \"<dateTime>\",\n  \"vendorId\": \"<uuid>\",\n  \"customerId\": \"<uuid>\"\n}"
				},
				{
					"name": "Bad Request - No location present (and no default address for customer) or other input errors (invalid format).",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"vendorId\": \"<uuid>\",\n  \"address\": {\n    \"houseNumber\": \"<integer>\",\n    \"zip\": \"<string>\",\n    \"longitude\": \"<double>\",\n    \"latitude\": \"<double>\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"order"
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Unauthorized - Not a customer user.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"vendorId\": \"<uuid>\",\n  \"address\": {\n    \"houseNumber\": \"<integer>\",\n    \"zip\": \"<string>\",\n    \"longitude\": \"<double>\",\n    \"latitude\": \"<double>\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"order"
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Not Found - User does not exist.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"vendorId\": \"<uuid>\",\n  \"address\": {\n    \"houseNumber\": \"<integer>\",\n    \"zip\": \"<string>\",\n    \"longitude\": \"<double>\",\n    \"latitude\": \"<double>\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"order"
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error - An unexpected error occurred on the server.",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"vendorId\": \"<uuid>\",\n  \"address\": {\n    \"houseNumber\": \"<integer>\",\n    \"zip\": \"<string>\",\n    \"longitude\": \"<double>\",\n    \"latitude\": \"<double>\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"order"
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Update the status of an order Copy",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"status\": \"pending\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/order/:orderId/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						":orderId",
						"status"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "<uuid>",
							"description": "(Required) "
						}
					]
				},
				"description": "Allows a vendor, courier or an admin to update the status of a specific order."
			},
			"response": [
				{
					"name": "Order status updated successfully.",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/:orderId/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								":orderId",
								"status"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"ID\": \"<uuid>\",\n  \"dishes\": [\n    {\n      \"id\": \"<uuid>\",\n      \"dish\": {\n        \"ID\": \"<uuid>\",\n        \"name\": \"<string>\",\n        \"imageLink\": \"<string>\",\n        \"price\": \"<double>\",\n        \"isDeleted\": false,\n        \"allergens\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"ingredients\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"description\": \"<string>\",\n        \"vendorId\": \"<uuid>\"\n      },\n      \"quantity\": 0\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"dish\": {\n        \"ID\": \"<uuid>\",\n        \"name\": \"<string>\",\n        \"imageLink\": \"<string>\",\n        \"price\": \"<double>\",\n        \"isDeleted\": false,\n        \"allergens\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"ingredients\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"description\": \"<string>\",\n        \"vendorId\": \"<uuid>\"\n      },\n      \"quantity\": 0\n    }\n  ],\n  \"location\": {\n    \"houseNumber\": \"<integer>\",\n    \"zip\": \"<string>\",\n    \"longitude\": \"<double>\",\n    \"latitude\": \"<double>\"\n  },\n  \"specialRequirements\": \"<string>\",\n  \"status\": \"onTransit\",\n  \"totalPrice\": \"<double>\",\n  \"orderTime\": \"<dateTime>\",\n  \"vendorId\": \"<uuid>\",\n  \"customerId\": \"<uuid>\"\n}"
				},
				{
					"name": "Bad request - Invalid status or request format.",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/:orderId/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								":orderId",
								"status"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Not Found - Order ID does not exist.",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/:orderId/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								":orderId",
								"status"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error - An unexpected error occurred.",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/:orderId/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								":orderId",
								"status"
							],
							"variable": [
								{
									"key": "orderId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	]
}