{
	"info": {
		"_postman_id": "af0a0abf-b430-4cc2-b421-a5732e490c78",
		"name": "customer - Vendors not in range not retrieved",
		"description": "This test documents a regular flow of how a customer would not see vendors that are not in their range.\n\nFirst, we need to create a vendor and a customer by calling the users microservice\n\nAfter that, the customer should query all of the vendors in his range\n\nNow, we just check that the added vendor is not shown\n\nHere, we test only that a vendor NOT in range is NOT retrieved and that a dish without allergens is shown.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "31458650"
	},
	"item": [
		{
			"name": "test customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"if (response && response.customerId) {\r",
							"    pm.globals.set(\"customerId\", response.customerId);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response must have customerId\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('customerId');\r",
							"});\r",
							"\r",
							"pm.test(\"Name is 'Test Customer'\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql(\"Test Customer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Home Address is correct\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.homeAddress.latitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.homeAddress.longitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.homeAddress.zipCode).to.eql(\"2554EZ\");\r",
							"    pm.expect(responseJson.homeAddress.houseNumber).to.eql(24);\r",
							"});\r",
							"\r",
							"pm.test(\"Current Address is correct\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.currentLocation.latitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.currentLocation.longitude).to.eql(34.092);\r",
							"    pm.expect(responseJson.currentLocation.zipCode).to.eql(\"2554EZ\");\r",
							"    pm.expect(responseJson.currentLocation.houseNumber).to.eql(24);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "3",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-User-Id",
						"value": "061427b7-a4d3-47de-86dc-764a227d6d72",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Test Customer\",\r\n  \"email\": \"customer@customer.com\",\r\n  \"homeAddress\": {\r\n    \"latitude\": 34.092,\r\n    \"longitude\": 34.092,\r\n    \"zipCode\": \"2554EZ\",\r\n    \"houseNumber\": 24\r\n  },\r\n  \"allergens\": \"Salt\",\r\n  \"currentLocation\": {\r\n    \"latitude\": 34.092,\r\n    \"longitude\": 34.092,\r\n    \"zipCode\": \"2554EZ\",\r\n    \"houseNumber\": 24\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8088/customers",
				"description": "Create test customer"
			},
			"response": []
		},
		{
			"name": "test vendor not in range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"if (response && response.vendorId) {\r",
							"    pm.globals.set(\"vendorId\", response.vendorId);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "3",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-User-Id",
						"value": "061427b7-a4d3-47de-86dc-764a227d6d72",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Test Restaurant\",\r\n  \"isBlocked\": false,\r\n  \"email\": \"restaurant@restaurant.com\",\r\n  \"isApproved\": false,\r\n  \"location\": {\r\n    \"latitude\": 21.492,\r\n    \"longitude\": 56.562,\r\n    \"zipCode\": \"2314GG\",\r\n    \"houseNumber\": 45\r\n  },\r\n  \"schedule\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8088/vendors",
				"description": "Create test customer"
			},
			"response": []
		},
		{
			"name": "Get list of vendors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Vendor not in range not in list\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var excludedVendorId = pm.globals.get(\"vendorId\");\r",
							"    \r",
							"    pm.expect(jsonData.some(vendor => vendor.vendorId === excludedVendorId)).to.be.false;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/customer/{{customerId}}/vendors",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"customer",
						"{{customerId}}",
						"vendors"
					],
					"query": [
						{
							"key": "name",
							"value": "<string>",
							"disabled": true
						},
						{
							"key": "minAvgPrice",
							"value": "<integer>",
							"disabled": true
						},
						{
							"key": "maxAvgPrice",
							"value": "<integer>",
							"disabled": true
						}
					]
				},
				"description": "Get a list of vendors within a specified radius around the customer's current location or default address.  The radius is predefined - 5 kilometers). The current location is retrieved from the users microservice. If there is no current location, we check if the user has a home address and use that. If there is no home address either, we send an error response. Additionaly, searching and filtering restaurants through query parameters is possible.\n"
			},
			"response": [
				{
					"name": "List of vendors.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/vendors?name=<string>&minAvgPrice=<integer>&maxAvgPrice=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"vendors"
							],
							"query": [
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "minAvgPrice",
									"value": "<integer>"
								},
								{
									"key": "maxAvgPrice",
									"value": "<integer>"
								}
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n  {\n    \"ID\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"location\": {\n      \"houseNumber\": \"<integer>\",\n      \"zip\": \"<string>\",\n      \"longitude\": \"<double>\",\n      \"latitude\": \"<double>\"\n    }\n  },\n  {\n    \"ID\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"location\": {\n      \"houseNumber\": \"<integer>\",\n      \"zip\": \"<string>\",\n      \"longitude\": \"<double>\",\n      \"latitude\": \"<double>\"\n    }\n  }\n]"
				},
				{
					"name": "Bad Request - Invalid request parameters.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/vendors?name=<string>&minAvgPrice=<integer>&maxAvgPrice=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"vendors"
							],
							"query": [
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "minAvgPrice",
									"value": "<integer>"
								},
								{
									"key": "maxAvgPrice",
									"value": "<integer>"
								}
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Unauthorized - Not a customer user.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/vendors?name=<string>&minAvgPrice=<integer>&maxAvgPrice=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"vendors"
							],
							"query": [
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "minAvgPrice",
									"value": "<integer>"
								},
								{
									"key": "maxAvgPrice",
									"value": "<integer>"
								}
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Not Found - User does not exist.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/vendors?name=<string>&minAvgPrice=<integer>&maxAvgPrice=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"vendors"
							],
							"query": [
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "minAvgPrice",
									"value": "<integer>"
								},
								{
									"key": "maxAvgPrice",
									"value": "<integer>"
								}
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error - An unexpected error occurred on the server.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customer/:customerId/vendors?name=<string>&minAvgPrice=<integer>&maxAvgPrice=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customer",
								":customerId",
								"vendors"
							],
							"query": [
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "minAvgPrice",
									"value": "<integer>"
								},
								{
									"key": "maxAvgPrice",
									"value": "<integer>"
								}
							],
							"variable": [
								{
									"key": "customerId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	]
}